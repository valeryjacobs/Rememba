//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Rememba.Voice.WindowsPhone
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[11];
            _typeNameTable[0] = "Rememba.Voice.WindowsPhone.MainPage";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "Rememba.Repositories.Windows.MindMapRepository";
            _typeNameTable[4] = "Object";
            _typeNameTable[5] = "System.Collections.ObjectModel.ObservableCollection`1<Rememba.Contracts.Models.IMindMap>";
            _typeNameTable[6] = "System.Collections.ObjectModel.Collection`1<Rememba.Contracts.Models.IMindMap>";
            _typeNameTable[7] = "Rememba.Contracts.Models.IMindMap";
            _typeNameTable[8] = "String";
            _typeNameTable[9] = "System.Collections.ObjectModel.ObservableCollection`1<String>";
            _typeNameTable[10] = "System.Collections.ObjectModel.Collection`1<String>";

            _typeTable = new global::System.Type[11];
            _typeTable[0] = typeof(global::Rememba.Voice.WindowsPhone.MainPage);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::Rememba.Repositories.Windows.MindMapRepository);
            _typeTable[4] = typeof(global::System.Object);
            _typeTable[5] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Rememba.Contracts.Models.IMindMap>);
            _typeTable[6] = typeof(global::System.Collections.ObjectModel.Collection<global::Rememba.Contracts.Models.IMindMap>);
            _typeTable[7] = typeof(global::Rememba.Contracts.Models.IMindMap);
            _typeTable[8] = typeof(global::System.String);
            _typeTable[9] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.String>);
            _typeTable[10] = typeof(global::System.Collections.ObjectModel.Collection<global::System.String>);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_MainPage() { return new global::Rememba.Voice.WindowsPhone.MainPage(); }
        private object Activate_3_MindMapRepository() { return new global::Rememba.Repositories.Windows.MindMapRepository(); }
        private object Activate_5_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Rememba.Contracts.Models.IMindMap>(); }
        private object Activate_6_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Rememba.Contracts.Models.IMindMap>(); }
        private object Activate_9_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.String>(); }
        private object Activate_10_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.String>(); }
        private void VectorAdd_5_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Rememba.Contracts.Models.IMindMap>)instance;
            var newItem = (global::Rememba.Contracts.Models.IMindMap)item;
            collection.Add(newItem);
        }
        private void VectorAdd_6_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Rememba.Contracts.Models.IMindMap>)instance;
            var newItem = (global::Rememba.Contracts.Models.IMindMap)item;
            collection.Add(newItem);
        }
        private void VectorAdd_9_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void VectorAdd_10_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Rememba.Voice.WindowsPhone.MainPage
                userType = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_MainPage;
                userType.AddMemberName("MindMapRepository");
                userType.AddMemberName("MindMapList");
                userType.AddMemberName("MemoList");
                userType.AddMemberName("SelectedMemo");
                userType.AddMemberName("SelectedMindMap");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Rememba.Repositories.Windows.MindMapRepository
                userType = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 4:   //  Object
                xamlType = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  System.Collections.ObjectModel.ObservableCollection`1<Rememba.Contracts.Models.IMindMap>
                userType = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Rememba.Contracts.Models.IMindMap>"));
                userType.CollectionAdd = VectorAdd_5_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  System.Collections.ObjectModel.Collection`1<Rememba.Contracts.Models.IMindMap>
                userType = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_Collection;
                userType.CollectionAdd = VectorAdd_6_Collection;
                xamlType = userType;
                break;

            case 7:   //  Rememba.Contracts.Models.IMindMap
                userType = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.AddMemberName("Content");
                userType.AddMemberName("ContentUri");
                userType.AddMemberName("Id");
                userType.AddMemberName("Name");
                userType.AddMemberName("Touched");
                xamlType = userType;
                break;

            case 8:   //  String
                xamlType = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  System.Collections.ObjectModel.ObservableCollection`1<String>
                userType = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<String>"));
                userType.CollectionAdd = VectorAdd_9_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 10:   //  System.Collections.ObjectModel.Collection`1<String>
                userType = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_Collection;
                userType.CollectionAdd = VectorAdd_10_Collection;
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_MainPage_MindMapRepository(object instance)
        {
            var that = (global::Rememba.Voice.WindowsPhone.MainPage)instance;
            return that.MindMapRepository;
        }
        private void set_0_MainPage_MindMapRepository(object instance, object Value)
        {
            var that = (global::Rememba.Voice.WindowsPhone.MainPage)instance;
            that.MindMapRepository = (global::Rememba.Repositories.Windows.MindMapRepository)Value;
        }
        private object get_1_MainPage_MindMapList(object instance)
        {
            var that = (global::Rememba.Voice.WindowsPhone.MainPage)instance;
            return that.MindMapList;
        }
        private void set_1_MainPage_MindMapList(object instance, object Value)
        {
            var that = (global::Rememba.Voice.WindowsPhone.MainPage)instance;
            that.MindMapList = (global::System.Collections.ObjectModel.ObservableCollection<global::Rememba.Contracts.Models.IMindMap>)Value;
        }
        private object get_2_IMindMap_Content(object instance)
        {
            var that = (global::Rememba.Contracts.Models.IMindMap)instance;
            return that.Content;
        }
        private void set_2_IMindMap_Content(object instance, object Value)
        {
            var that = (global::Rememba.Contracts.Models.IMindMap)instance;
            that.Content = (global::System.String)Value;
        }
        private object get_3_IMindMap_ContentUri(object instance)
        {
            var that = (global::Rememba.Contracts.Models.IMindMap)instance;
            return that.ContentUri;
        }
        private void set_3_IMindMap_ContentUri(object instance, object Value)
        {
            var that = (global::Rememba.Contracts.Models.IMindMap)instance;
            that.ContentUri = (global::System.String)Value;
        }
        private object get_4_IMindMap_Id(object instance)
        {
            var that = (global::Rememba.Contracts.Models.IMindMap)instance;
            return that.Id;
        }
        private void set_4_IMindMap_Id(object instance, object Value)
        {
            var that = (global::Rememba.Contracts.Models.IMindMap)instance;
            that.Id = (global::System.String)Value;
        }
        private object get_5_IMindMap_Name(object instance)
        {
            var that = (global::Rememba.Contracts.Models.IMindMap)instance;
            return that.Name;
        }
        private void set_5_IMindMap_Name(object instance, object Value)
        {
            var that = (global::Rememba.Contracts.Models.IMindMap)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_6_IMindMap_Touched(object instance)
        {
            var that = (global::Rememba.Contracts.Models.IMindMap)instance;
            return that.Touched;
        }
        private void set_6_IMindMap_Touched(object instance, object Value)
        {
            var that = (global::Rememba.Contracts.Models.IMindMap)instance;
            that.Touched = (global::System.String)Value;
        }
        private object get_7_MainPage_MemoList(object instance)
        {
            var that = (global::Rememba.Voice.WindowsPhone.MainPage)instance;
            return that.MemoList;
        }
        private void set_7_MainPage_MemoList(object instance, object Value)
        {
            var that = (global::Rememba.Voice.WindowsPhone.MainPage)instance;
            that.MemoList = (global::System.Collections.ObjectModel.ObservableCollection<global::System.String>)Value;
        }
        private object get_8_MainPage_SelectedMemo(object instance)
        {
            var that = (global::Rememba.Voice.WindowsPhone.MainPage)instance;
            return that.SelectedMemo;
        }
        private void set_8_MainPage_SelectedMemo(object instance, object Value)
        {
            var that = (global::Rememba.Voice.WindowsPhone.MainPage)instance;
            that.SelectedMemo = (global::System.String)Value;
        }
        private object get_9_MainPage_SelectedMindMap(object instance)
        {
            var that = (global::Rememba.Voice.WindowsPhone.MainPage)instance;
            return that.SelectedMindMap;
        }
        private void set_9_MainPage_SelectedMindMap(object instance, object Value)
        {
            var that = (global::Rememba.Voice.WindowsPhone.MainPage)instance;
            that.SelectedMindMap = (global::System.String)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlMember xamlMember = null;
            global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Rememba.Voice.WindowsPhone.MainPage.MindMapRepository":
                userType = (global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Rememba.Voice.WindowsPhone.MainPage");
                xamlMember = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlMember(this, "MindMapRepository", "Rememba.Repositories.Windows.MindMapRepository");
                xamlMember.Getter = get_0_MainPage_MindMapRepository;
                xamlMember.Setter = set_0_MainPage_MindMapRepository;
                break;
            case "Rememba.Voice.WindowsPhone.MainPage.MindMapList":
                userType = (global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Rememba.Voice.WindowsPhone.MainPage");
                xamlMember = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlMember(this, "MindMapList", "System.Collections.ObjectModel.ObservableCollection`1<Rememba.Contracts.Models.IMindMap>");
                xamlMember.Getter = get_1_MainPage_MindMapList;
                xamlMember.Setter = set_1_MainPage_MindMapList;
                break;
            case "Rememba.Contracts.Models.IMindMap.Content":
                userType = (global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Rememba.Contracts.Models.IMindMap");
                xamlMember = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlMember(this, "Content", "String");
                xamlMember.Getter = get_2_IMindMap_Content;
                xamlMember.Setter = set_2_IMindMap_Content;
                break;
            case "Rememba.Contracts.Models.IMindMap.ContentUri":
                userType = (global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Rememba.Contracts.Models.IMindMap");
                xamlMember = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlMember(this, "ContentUri", "String");
                xamlMember.Getter = get_3_IMindMap_ContentUri;
                xamlMember.Setter = set_3_IMindMap_ContentUri;
                break;
            case "Rememba.Contracts.Models.IMindMap.Id":
                userType = (global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Rememba.Contracts.Models.IMindMap");
                xamlMember = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlMember(this, "Id", "String");
                xamlMember.Getter = get_4_IMindMap_Id;
                xamlMember.Setter = set_4_IMindMap_Id;
                break;
            case "Rememba.Contracts.Models.IMindMap.Name":
                userType = (global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Rememba.Contracts.Models.IMindMap");
                xamlMember = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_5_IMindMap_Name;
                xamlMember.Setter = set_5_IMindMap_Name;
                break;
            case "Rememba.Contracts.Models.IMindMap.Touched":
                userType = (global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Rememba.Contracts.Models.IMindMap");
                xamlMember = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlMember(this, "Touched", "String");
                xamlMember.Getter = get_6_IMindMap_Touched;
                xamlMember.Setter = set_6_IMindMap_Touched;
                break;
            case "Rememba.Voice.WindowsPhone.MainPage.MemoList":
                userType = (global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Rememba.Voice.WindowsPhone.MainPage");
                xamlMember = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlMember(this, "MemoList", "System.Collections.ObjectModel.ObservableCollection`1<String>");
                xamlMember.Getter = get_7_MainPage_MemoList;
                xamlMember.Setter = set_7_MainPage_MemoList;
                break;
            case "Rememba.Voice.WindowsPhone.MainPage.SelectedMemo":
                userType = (global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Rememba.Voice.WindowsPhone.MainPage");
                xamlMember = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlMember(this, "SelectedMemo", "String");
                xamlMember.Getter = get_8_MainPage_SelectedMemo;
                xamlMember.Setter = set_8_MainPage_SelectedMemo;
                break;
            case "Rememba.Voice.WindowsPhone.MainPage.SelectedMindMap":
                userType = (global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Rememba.Voice.WindowsPhone.MainPage");
                xamlMember = new global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlMember(this, "SelectedMindMap", "String");
                xamlMember.Getter = get_9_MainPage_SelectedMindMap;
                xamlMember.Setter = set_9_MainPage_SelectedMindMap;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlSystemBaseType
    {
        global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Rememba.Voice.WindowsPhone.Rememba_Voice_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}






